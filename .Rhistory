source("002_cria_music_salva_arquivo.R")
source("003_insere_canais_manualmente_concatena_resultados_buscados.R")
source("004_cria_index_epg_no_m3u8.R")
source("005_cria_grupos.R")
#source("006_double_check_canais.R")
source("007_atribui_logo_remove_repetidos.R")
source("010_remove_grupo_omitir.R")
tabula_group_title(nome_coluna)
# if (valor_numerico == 2) {
#   source("008_testa_links_m3u8_group.R")
#   tabula_group_title(nome_coluna)
# }
if (valor_numerico==1) {
retry(source("009_cria_xml.R"), max = Inf)
#try(source("010_remove_grupo_omitir.R"), silent = T)
}
try(file.remove("canais_encontrados_modificados.m3u8"), silent = T)
info_so <- Sys.info()
dia_hora <- Sys.time()
dia_hora <- str_replace_all(string = dia_hora, pattern = "-", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = ":", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = " ", replacement = "")
## sobe arquivos no github
#   if (info_so['sysname'] == 'Windows') {
#     github_windows(paste0("atualizacao_", dia_hora))
#   } else if (info_so['sysname'] == 'Linux') {
#     github_linux(paste0("atualizacao_", dia_hora))
#   }
}
################################################################################
################################################################################
# Bloco 1, recebe a lista de URLs e concatena em um arquivo chamado "minha_lista.m3u8"
# Definir caminho do arquivo e nome da coluna
caminho_arquivo <- "urls_geral.xlsx"
if (valor_numerico == 1) {
nome_coluna <- "reduced.m3u8"
url_m3u8 <- read_xlsx(caminho_arquivo, sheet ='reduced.m3u8')
url_m3u8 <- url_m3u8$reduced.m3u8
url_m3u8 <- unique(url_m3u8)
} else if (valor_numerico == 2) {
nome_coluna <- "full.m3u8"
url_m3u8 <- read_xlsx(caminho_arquivo, sheet ='full.m3u8')
url_m3u8 <- url_m3u8$full.m3u8
url_m3u8 <- unique(url_m3u8)
}
# Processar URLs e coletar o conteúdo para cada uma
conteudos <- lapply(url_m3u8, processa_url)
# Inicializar o DataFrame para armazenar URLs bem-sucedidas
urls_funcionando <- data.frame(urls_geral = character(), stringsAsFactors = FALSE)
# Filtrar linhas em branco para cada conteúdo e então unlist
conteudos_filtrados <- lapply(conteudos, function(x) {
if (!is.null(x)) {
urls_funcionando <<- rbind(urls_funcionando, data.frame(urls_geral = x$url))
grep("^\\S", x$conteudo, value = TRUE)
}
})
conteudo_final_sem_filtro <- paste(unlist(conteudos_filtrados), collapse = "\n")
conteudo_final <- gsub("\n{2,}", "\n", conteudo_final_sem_filtro)
# Salvar o conteúdo final no arquivo "minha_lista.m3u8", eliminando linhas em branco
writeLines(conteudo_final, nome_coluna)
message("Arquivo salvo com sucesso.")
################################################################################
################################################################################
################################################################################
################################################################################
# Bloco 2, carrega o arquivo "minha_lista.m3u8", aplica Regex e cria novo grupo
# chamado "Music" e salva no arquivo "canais_encontrados_modificados.m3u8"
# Ler o arquivo com os dados dos canais
caminho_do_arquivo <- nome_coluna
linhas <- readLines(caminho_do_arquivo)
canais_buscados <- read_xlsx("urls_geral.xlsx", sheet = 'canais')
canais_buscados <- unique(canais_buscados$canais)
canais_buscados <- as.list(canais_buscados)
# Inicializar uma lista para armazenar os resultados da busca
resultados_busca <- list()
# Definir o novo valor para "group-title"
novo_group_title <- "Music"
# Inicializar os elementos da lista para cada canal buscado
for (canal in canais_buscados) {
print(canal)
resultados_busca[[canal]] <- c()
}
# Buscar os canais e modificar a tag "group-title"
canais_encontrados <- c()
capturar_proxima_linha <- FALSE
for (linha in linhas) {
#print(linha)
if (capturar_proxima_linha) {
# Adiciona a URL do canal encontrado na lista
canais_encontrados <- c(canais_encontrados, linha)
capturar_proxima_linha <- FALSE # Reseta o indicador para captura da próxima linha
next
}
for (canal in canais_buscados) {
#print(canal)
if (str_detect(linha, fixed(canal))) {
# Substituir o valor da tag "group-title" pelo valor especificado
linha_modificada <- str_replace(linha, pattern = "group-title=\"[^\"]*\"", replacement = sprintf("group-title=\"%s\"", novo_group_title))
# Extrair o nome do canal e armazenar na lista de resultados
nome_canal <- str_extract(linha, "(?<=,).*$")
resultados_busca[[canal]] <- c(resultados_busca[[canal]], nome_canal)
# Salvar a linha modificada em um vetor temporário para posterior salvamento
canais_encontrados <- c(canais_encontrados, linha_modificada)
capturar_proxima_linha <- TRUE # Seta o indicador para capturar a próxima linha (URL)
break # Interrompe o loop interno uma vez que o canal foi encontrado e modificado
}
}
}
# Verificar se algum canal foi encontrado e salvar os canais modificados em um novo arquivo
if (length(canais_encontrados) > 0) {
writeLines(canais_encontrados, "canais_encontrados_modificados.m3u8")
cat("Canais encontrados com a tag 'group-title' modificada para '", novo_group_title, "' e suas URLs foram salvos em 'canais_encontrados_modificados.m3u8'.\n", sep="")
}
# Imprime os resultados
for (canal in names(resultados_busca)) {
print(canal)
if (length(resultados_busca[[canal]]) > 0) {
cat("Canal:", canal, "\n")
cat("Quantidade encontrada:", length(resultados_busca[[canal]]), "\n")
cat("Nomes dos canais:\n", paste(resultados_busca[[canal]], collapse = "\n"), "\n\n")
} else {
cat("Nenhum canal encontrado para:", canal, "\n\n")
}
}
################################################################################
################################################################################
################################################################################
################################################################################
# Bloco 3, Insere novos canais manualmente e concatena listas
# Definir os caminhos dos arquivos
caminho_lista_original <- nome_coluna
caminho_lista_modificada <- "canais_encontrados_modificados.m3u8"
caminho_lista_concatenada <- nome_coluna
# Ler os conteúdos dos arquivos
conteudo_lista_original <- readLines(caminho_lista_original)
conteudo_lista_modificada <- readLines(caminho_lista_modificada)
source("C:/Users/pira_abs/OneDrive/ciencia_de_dados/R/iptv/thestreamremainsthesame/001_download_concatenacao_urls.R")
################################################################################
################################################################################
# Bloco 2, carrega o arquivo "minha_lista.m3u8", aplica Regex e cria novo grupo
# chamado "Music" e salva no arquivo "canais_encontrados_modificados.m3u8"
# Ler o arquivo com os dados dos canais
caminho_do_arquivo <- nome_coluna
linhas <- readLines(caminho_do_arquivo)
canais_buscados <- read_xlsx("urls_geral.xlsx", sheet = 'canais')
canais_buscados <- unique(canais_buscados$canais)
canais_buscados <- as.list(canais_buscados)
# Inicializar uma lista para armazenar os resultados da busca
resultados_busca <- list()
# Definir o novo valor para "group-title"
novo_group_title <- "Music"
# Inicializar os elementos da lista para cada canal buscado
for (canal in canais_buscados) {
print(canal)
resultados_busca[[canal]] <- c()
}
# Buscar os canais e modificar a tag "group-title"
canais_encontrados <- c()
capturar_proxima_linha <- FALSE
for (linha in linhas) {
#print(linha)
if (capturar_proxima_linha) {
# Adiciona a URL do canal encontrado na lista
canais_encontrados <- c(canais_encontrados, linha)
capturar_proxima_linha <- FALSE # Reseta o indicador para captura da próxima linha
next
}
for (canal in canais_buscados) {
#print(canal)
if (str_detect(linha, fixed(canal))) {
# Substituir o valor da tag "group-title" pelo valor especificado
linha_modificada <- str_replace(linha, pattern = "group-title=\"[^\"]*\"", replacement = sprintf("group-title=\"%s\"", novo_group_title))
# Extrair o nome do canal e armazenar na lista de resultados
nome_canal <- str_extract(linha, "(?<=,).*$")
resultados_busca[[canal]] <- c(resultados_busca[[canal]], nome_canal)
# Salvar a linha modificada em um vetor temporário para posterior salvamento
canais_encontrados <- c(canais_encontrados, linha_modificada)
capturar_proxima_linha <- TRUE # Seta o indicador para capturar a próxima linha (URL)
break # Interrompe o loop interno uma vez que o canal foi encontrado e modificado
}
}
}
# Verificar se algum canal foi encontrado e salvar os canais modificados em um novo arquivo
if (length(canais_encontrados) > 0) {
writeLines(canais_encontrados, "canais_encontrados_modificados.m3u8")
cat("Canais encontrados com a tag 'group-title' modificada para '", novo_group_title, "' e suas URLs foram salvos em 'canais_encontrados_modificados.m3u8'.\n", sep="")
}
# Imprime os resultados
for (canal in names(resultados_busca)) {
print(canal)
if (length(resultados_busca[[canal]]) > 0) {
cat("Canal:", canal, "\n")
cat("Quantidade encontrada:", length(resultados_busca[[canal]]), "\n")
cat("Nomes dos canais:\n", paste(resultados_busca[[canal]], collapse = "\n"), "\n\n")
} else {
cat("Nenhum canal encontrado para:", canal, "\n\n")
}
}
################################################################################
################################################################################
################################################################################
################################################################################
# Bloco 3, Insere novos canais manualmente e concatena listas
# Definir os caminhos dos arquivos
caminho_lista_original <- nome_coluna
caminho_lista_modificada <- "canais_encontrados_modificados.m3u8"
caminho_lista_concatenada <- nome_coluna
# Ler os conteúdos dos arquivos
conteudo_lista_original <- readLines(caminho_lista_original)
conteudo_lista_modificada <- readLines(caminho_lista_modificada)
################################################################################
################################################################################
# Bloco 4, apenas modifica a primeira linha indicado xml (epg) default
# Definir o caminho do arquivo
caminho_do_arquivo <- nome_coluna
# Ler o arquivo
linhas <- readLines(caminho_do_arquivo)
# Substituir a URL na primeira linha
if (grepl("^#EXTM3U", linhas[1])) {
linhas[1] <- gsub('x-tvg-url="[^"]+"', 'x-tvg-url="https://github.com/tenorioabs/thestreamremainsthesame/raw/main/reduced.xml.gz"', linhas[1], perl = TRUE)
}
# Remover as linhas com a tag x-tvg-url, exceto a primeira linha
linhas_para_manter <- c(linhas[1], linhas[!grepl('x-tvg-url=', linhas) | !grepl('^#EXTM3U', linhas)])
# Salvar o arquivo com as modificações
writeLines(linhas_para_manter, caminho_do_arquivo)
# Mensagem de confirmação
cat("O arquivo foi atualizado. A URL na tag 'x-tvg-url' da primeira linha foi substituída.\n")
################################################################################
################################################################################
################################################################################
################################################################################
# Bloco 5, substitui nomes de grupos e atualiza o arquivo "minha_lista_concatenada.m3u8"
# Define o caminho do arquivo de entrada e de saída
arquivo_entrada <- nome_coluna
arquivo_saida <- nome_coluna
# Lê o conteúdo do arquivo de entrada
conteudo <- readLines(arquivo_entrada, warn = FALSE)
# Lista de títulos de grupos que devem ser mantidos
titulos_mantidos <- c("Brazil",
"Canada",
"EFL",
"EPL",
"Great Britain",
"MLB",
"Music",
"NFL",
"NHL",
"Portugal",
"United States",
"NBA",
"UFC",
"Sports")
# Função para verificar e substituir os títulos dos grupos
substituir_titulos <- function(linha) {
# Verifica se a linha é um canal
if (grepl("^#EXTINF:", linha)) {
if (grepl('group-title="Nz"', linha)) { linha <- sub('group-title="Nz"', 'group-title="New Zealand"', linha) }
if (grepl('group-title="Au"', linha)) { linha <- sub('group-title="Au"', 'group-title="Australia"', linha) }
if (grepl('group-title="Adelaide"', linha)) { linha <- sub('group-title="Adelaide"', 'group-title="Australia"', linha) }
if (grepl('group-title="Brisbane"', linha)) { linha <- sub('group-title="Brisbane"', 'group-title="Australia"', linha) }
if (grepl('group-title="Canberra"', linha)) { linha <- sub('group-title="Canberra"', 'group-title="Australia"', linha) }
if (grepl('group-title="Darwin"', linha)) { linha <- sub('group-title="Darwin"', 'group-title="Australia"', linha) }
if (grepl('group-title="Hobart"', linha)) { linha <- sub('group-title="Hobart"', 'group-title="Australia"', linha) }
if (grepl('group-title="Melbourne"', linha)) { linha <- sub('group-title="Melbourne"', 'group-title="Australia"', linha) }
if (grepl('group-title="Perth"', linha)) { linha <- sub('group-title="Perth"', 'group-title="Australia"', linha) }
if (grepl('group-title="Sydney"', linha)) { linha <- sub('group-title="Sydney"', 'group-title="Australia"', linha) }
# Verifica se a linha contém algum dos títulos de grupos mantidos
mantido <- FALSE
for (titulo in titulos_mantidos) {
if (grepl(sprintf('group-title="%s"', titulo), linha)) {
mantido <- TRUE
break
}
}
# Se não for um título mantido, substitui por "Omitir"
if (!mantido) {
# Verifica se já existe um group-title para substituição
if (grepl("group-title=", linha)) {
linha <- sub('group-title="[^"]*"', 'group-title="Omitir"', linha)
} else {
# Caso não exista um group-title, adiciona um novo com "Omitir"
linha <- sub("^#EXTINF:", '#EXTINF: group-title="Omitir",', linha)
}
}
}
return(linha)
}
#
# Aplica a função de substituição ao conteúdo
conteudo_modificado <- sapply(conteudo, substituir_titulos, USE.NAMES = FALSE)
# Salva o conteúdo modificado no arquivo de saída
writeLines(conteudo_modificado, arquivo_saida)
# Mensagem de conclusão
cat("O arquivo", arquivo_saida, "foi atualizado com sucesso.")
# Carrega as bibliotecas necessárias
if (!requireNamespace("stringr", quietly = TRUE)) install.packages("stringr")
library(stringr)
# Define o caminho para o arquivo m3u8
caminho_arquivo <- nome_coluna
# Lê o arquivo linha por linha
linhas_arquivo <- readLines(caminho_arquivo, warn = FALSE)
# Inicializa variáveis para construir os blocos
blocos_canais <- list()
bloco_atual <- ""
inicio_novo_bloco <- TRUE
# Constrói os blocos de canais manualmente
for (linha in linhas_arquivo) {
#print(linha)
if (str_detect(linha, "^#EXTINF")) {
if (!inicio_novo_bloco) {
blocos_canais <- c(blocos_canais, list(bloco_atual))
bloco_atual <- ""
}
inicio_novo_bloco <- FALSE
}
bloco_atual <- paste(bloco_atual, linha, sep = "\n")
}
# Adiciona o último bloco se não estiver vazio
if (bloco_atual != "") {
blocos_canais <- c(blocos_canais, list(bloco_atual))
}
# Padrões regex
padrao_brasil <- "(Brasil|Brazil|brasil|brazil|bra|Bra|br:|BR:|\\(br\\)|\\(BR\\)|BR_)"
padrao_group_title <- "group-title=\"[^\"]*\""
# Inicializa a barra de progresso
pb <- txtProgressBar(min = 0, max = length(blocos_canais), style = 3)
# Processa cada bloco
for (i in seq_along(blocos_canais)) {
print(i)
bloco <- blocos_canais[[i]]
# Verifica se contém menção ao Brasil
if (str_detect(bloco, padrao_brasil)) {
# Substitui o valor de group-title por "Brazil"
bloco <- str_replace_all(bloco, padrao_group_title, 'group-title="Brazil"')
blocos_canais[[i]] <- bloco
}
# Atualiza a barra de progresso
setTxtProgressBar(pb, i)
}
# Fecha a barra de progresso
close(pb)
# Combina os blocos ajustados de volta em uma única string
conteudo_ajustado <- paste(unlist(blocos_canais), collapse = "\n")
# Escreve o conteúdo ajustado de volta no arquivo
writeLines(conteudo_ajustado, nome_coluna)
cat("O arquivo foi ajustado com sucesso. Os 'group-title' foram modificados para 'Brazil' onde foram encontradas menções ao país.\n")
source("099_instala_carrega_pacotes.R")
source("098_funcoes.R")
options(warn = -1)
# Solicitar ao usuário que insira um valor
# opcoes <- as.numeric(readline("Escolha 1 = Reduced ou 2 = Full:"))
opcoes <- c(1, 2)
for (i in 1:length(opcoes)) {
valor_numerico <- i
source("001_download_concatenacao_urls.R")
tabula_group_title(nome_coluna)
source("002_cria_music_salva_arquivo.R")
#source("003_insere_canais_manualmente_concatena_resultados_buscados.R")
source("004_cria_index_epg_no_m3u8.R")
source("005_cria_grupos.R")
#source("006_double_check_canais.R")
source("007_atribui_logo_remove_repetidos.R")
source("010_remove_grupo_omitir.R")
tabula_group_title(nome_coluna)
# if (valor_numerico == 2) {
#   source("008_testa_links_m3u8_group.R")
#   tabula_group_title(nome_coluna)
# }
if (valor_numerico==1) {
retry(source("009_cria_xml.R"), max = Inf)
#try(source("010_remove_grupo_omitir.R"), silent = T)
}
try(file.remove("canais_encontrados_modificados.m3u8"), silent = T)
info_so <- Sys.info()
dia_hora <- Sys.time()
dia_hora <- str_replace_all(string = dia_hora, pattern = "-", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = ":", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = " ", replacement = "")
## sobe arquivos no github
#   if (info_so['sysname'] == 'Windows') {
#     github_windows(paste0("atualizacao_", dia_hora))
#   } else if (info_so['sysname'] == 'Linux') {
#     github_linux(paste0("atualizacao_", dia_hora))
#   }
}
source("099_instala_carrega_pacotes.R")
source("098_funcoes.R")
options(warn = -1)
# Solicitar ao usuário que insira um valor
# opcoes <- as.numeric(readline("Escolha 1 = Reduced ou 2 = Full:"))
opcoes <- c(1, 2)
for (i in 1:length(opcoes)) {
valor_numerico <- i
source("001_download_concatenacao_urls.R")
#tabula_group_title(nome_coluna)
source("002_cria_music_salva_arquivo.R")
#source("003_insere_canais_manualmente_concatena_resultados_buscados.R")
source("004_cria_index_epg_no_m3u8.R")
source("005_cria_grupos.R")
#source("006_double_check_canais.R")
source("007_atribui_logo_remove_repetidos.R")
source("010_remove_grupo_omitir.R")
tabula_group_title(nome_coluna)
# if (valor_numerico == 2) {
#   source("008_testa_links_m3u8_group.R")
#   tabula_group_title(nome_coluna)
# }
if (valor_numerico==1) {
retry(source("009_cria_xml.R"), max = Inf)
#try(source("010_remove_grupo_omitir.R"), silent = T)
}
try(file.remove("canais_encontrados_modificados.m3u8"), silent = T)
info_so <- Sys.info()
dia_hora <- Sys.time()
dia_hora <- str_replace_all(string = dia_hora, pattern = "-", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = ":", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = " ", replacement = "")
## sobe arquivos no github
#   if (info_so['sysname'] == 'Windows') {
#     github_windows(paste0("atualizacao_", dia_hora))
#   } else if (info_so['sysname'] == 'Linux') {
#     github_linux(paste0("atualizacao_", dia_hora))
#   }
}
opcoes <- c(1, 2)
for (i in 1:length(opcoes)) {
valor_numerico <- i
source("001_download_concatenacao_urls.R")
#tabula_group_title(nome_coluna)
source("002_cria_music_salva_arquivo.R")
#source("003_insere_canais_manualmente_concatena_resultados_buscados.R")
source("004_cria_index_epg_no_m3u8.R")
source("005_cria_grupos.R")
#source("006_double_check_canais.R")
source("007_atribui_logo_remove_repetidos.R")
source("010_remove_grupo_omitir.R")
#tabula_group_title(nome_coluna)
# if (valor_numerico == 2) {
#   source("008_testa_links_m3u8_group.R")
#   tabula_group_title(nome_coluna)
# }
if (valor_numerico==1) {
retry(source("009_cria_xml.R"), max = Inf)
#try(source("010_remove_grupo_omitir.R"), silent = T)
}
try(file.remove("canais_encontrados_modificados.m3u8"), silent = T)
info_so <- Sys.info()
dia_hora <- Sys.time()
dia_hora <- str_replace_all(string = dia_hora, pattern = "-", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = ":", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = " ", replacement = "")
## sobe arquivos no github
#   if (info_so['sysname'] == 'Windows') {
#     github_windows(paste0("atualizacao_", dia_hora))
#   } else if (info_so['sysname'] == 'Linux') {
#     github_linux(paste0("atualizacao_", dia_hora))
#   }
}
## sobe arquivos no github
if (info_so['sysname'] == 'Windows') {
github_windows(paste0("atualizacao_", dia_hora))
} else if (info_so['sysname'] == 'Linux') {
github_linux(paste0("atualizacao_", dia_hora))
}
source("099_instala_carrega_pacotes.R")
source("098_funcoes.R")
options(warn = -1)
opcoes <- c(1)
for (i in 1:length(opcoes)) {
valor_numerico <- i
source("001_download_concatenacao_urls.R")
#tabula_group_title(nome_coluna)
source("002_cria_music_salva_arquivo.R")
#source("003_insere_canais_manualmente_concatena_resultados_buscados.R")
source("004_cria_index_epg_no_m3u8.R")
source("005_cria_grupos.R")
#source("006_double_check_canais.R")
source("007_atribui_logo_remove_repetidos.R")
source("010_remove_grupo_omitir.R")
#tabula_group_title(nome_coluna)
# if (valor_numerico == 2) {
#   source("008_testa_links_m3u8_group.R")
#   tabula_group_title(nome_coluna)
# }
if (valor_numerico==1) {
retry(source("009_cria_xml.R"), max = Inf)
#try(source("010_remove_grupo_omitir.R"), silent = T)
}
try(file.remove("canais_encontrados_modificados.m3u8"), silent = T)
info_so <- Sys.info()
dia_hora <- Sys.time()
dia_hora <- str_replace_all(string = dia_hora, pattern = "-", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = ":", replacement = "")
dia_hora <- str_replace_all(string = dia_hora, pattern = " ", replacement = "")
## sobe arquivos no github
if (info_so['sysname'] == 'Windows') {
github_windows(paste0("atualizacao_", dia_hora))
} else if (info_so['sysname'] == 'Linux') {
github_linux(paste0("atualizacao_", dia_hora))
}
}
source("099_instala_carrega_pacotes.R")
source("098_funcoes.R")
options(warn = -1)
source("001_download_concatenacao_urls.R")
source("099_instala_carrega_pacotes.R")
source("098_funcoes.R")
options(warn = -1)
source("001_download_concatenacao_urls.R")
source("001_download_concatenacao_urls.R")
source("001_download_concatenacao_urls.R")
tabula_group_title(nome_coluna)
